generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @unique @default(uuid())
  userName    String        @unique
  email       String        @unique
  password    String?
  avatarUrl   String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  role        Role          @default(USER)
  accounts    Account[]
  tokens      Token[]
  profile     Profile?
  japanImages JapanImages[]
  travelLogs   TravelLog[]
  posts       Post[]
  likes       Like[]
  projects    Project[]
}

model JapanImages {
id  Int @id @unique @default(autoincrement())
  imageUrl String
  imgTitle String?
  imgDescription String?
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String
}


model TravelLog {
  id  Int @id @unique @default(autoincrement())
  imageUrl String
  imageTitle String?
  imageDescription String?
  // album describes the primary destination
  album String?
  city String?
  year String?


  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String
}
model Project {
  id          String     @id @unique @default(uuid())
  title       String
  description String
  projectImg  String
  projectUrl  String
  githubUrl   String
  categories  Category[]
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
}

model Post {
  id          String   @id @unique @default(uuid())
  title       String
  description String
  body        String
  imageUrl     String
  createdBy   String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  comments    Post[]   @relation("comments")
  parentId    String?
  parent      Post?    @relation("comments", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  categories Category[]
  likes      Like[]

  @@index([id, userId])
  @@index([userId])
}

model Category {
  id       String    @id @unique @default(uuid())
  label     String
  value    String    @unique
  posts    Post[]
  projects Project[]
}

model Profile {
  id             String   @id @unique @default(uuid())
  userName       String
  firstName      String
  lastName       String
  bio            String
  location       String
  education      String
  occupation     String
  profilePicture String   @default("https://res.cloudinary.com/dch-photo/image/upload/v1672092441/stock/image_FILL0_wght400_GRAD0_opsz48_loo0xo.png")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String   @unique
  email          String
}

model Like {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([postId, userId])
  @@index([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Token {
  id        String    @id @default(cuid())
  token     String
  type      TokenType
  expiresAt DateTime?
  sentTo    String?
  usedAt    DateTime?
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([token, type])
  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

enum Role {
  ADMIN
  USER
  MEMBER
}

enum TokenType {
  REFRESH_TOKEN
  VERIFY_EMAIL
  RESET_PASSWORD
}
